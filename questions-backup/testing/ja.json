[{"id":1,"question":" 何が出力されるでしょうか？","codeSnippet":"function sayHi() {\n  console.log(name);\n  console.log(age);\n  var name = \"Lydia\";\n  let age = 21;\n}\n\nsayHi();","answerOptions":{"A":"`Lydia` と `undefined`","B":"`Lydia` と `ReferenceError`","C":"`ReferenceError` と `21`","D":"`undefined` と `ReferenceError`"},"correctAnswer":"D","answerExplanation":"関数内で、まず `var`キーワードを使って `name`変数を宣言します。これは、変数が定義されている行に実際に到達するまで、変数がデフォルト値の `undefined`で初期化される（作成時にメモリ空間が設定される）ことを意味します。 \n\n`name`変数をログ出力を実行している行では、まだ変数を定義していませんので、`undefined`の値を保持しています。\n\n`let`キーワード（または`const`）を持つ変数は持ち上げられますが、 `var`とは異なり、初期化されません。それらを宣言（初期化）する行の前にはアクセスできません。これは\"temporal dead zone\"と呼ばれます。\n\n宣言される前に変数にアクセスしようとすると、JavaScriptは `ReferenceError`を投げます。"},{"id":2,"question":" 何が出力されるでしょうか？","codeSnippet":"for (var i = 0; i < 3; i++) {\n  setTimeout(() => console.log(i), 1);\n}\n\nfor (let i = 0; i < 3; i++) {\n  setTimeout(() => console.log(i), 1);\n}","answerOptions":{"A":"`0 1 2` と `0 1 2`","B":"`0 1 2` と `3 3 3`","C":"`3 3 3` と `0 1 2`"},"correctAnswer":"C","answerExplanation":"JavaScriptのイベントキューのため、`setTimeout`コールバック関数はループが実行された後に呼び出されます。最初のループの変数 `i`は`var`キーワードを使って宣言されているので、この値はグローバル変数となります。ループの間、単項演算子 `++`を使用して、毎回 `i`の値を`1`ずつインクリメントしました。 最初の例では `setTimeout`コールバック関数が呼び出されるまでに`i`は`3`となりました。\n\n2番目のループでは、変数 `i`が `let`キーワードを使って宣言されました。 `let`（または`const`）キーワードで宣言された変数はブロックスコープです（ブロックは `{}`の間のものです）。それぞれの繰り返しの間、 `i`は新しい値を持ち、それぞれの値はループの内側にあります。"},{"id":3,"question":" 何が出力されるでしょうか？","codeSnippet":"const shape = {\n  radius: 10,\n  diameter() {\n    return this.radius * 2;\n  },\n  perimeter: () => 2 * Math.PI * this.radius\n};\n\nshape.diameter();\nshape.perimeter();","answerOptions":{"A":"`20` と `62.83185307179586`","B":"`20` と `NaN`","C":"`20` と `63`","D":"`NaN` と `63`"},"correctAnswer":"B","answerExplanation":"`diameter`の値は正則関数であり、`perimeter`の値はアロー関数です。\n\nアロー関数では、`this`キーワードは通常の関数とは異なり、現在の周囲の範囲を参照します。これは、`perimeter`関数を呼ぶと、shapeオブジェクトではなく、その周囲の範囲（例えば window）を参照することを意味します。\n\nそのオブジェクトには`radius`という値はなく、`undefined`を返します。"},{"id":4,"question":" 何が出力されるでしょうか？","codeSnippet":"+true;\n!\"Lydia\";","answerOptions":{"A":"`1` と `false`","B":"`false` と `NaN`","C":"`false` と `false`"},"correctAnswer":"A","answerExplanation":"単項プラスは、オペランドを数値に変換しようとします。`true`は`1`、`false`は`0`です\n\n文字列「Lydia」は truthy valueです。ここで求めているのは、「このtruthy valueは、falsyなのか」ということです。これは `false`を返します。"},{"id":5,"question":" 正解はどれでしょう？","codeSnippet":"const bird = {\n  size: \"small\"\n};\n\nconst mouse = {\n  name: \"Mickey\",\n  small: true\n};","answerOptions":{"A":"`mouse.bird.size` is not valid","B":"`mouse[bird.size]` is not valid","C":"`mouse[bird[\"size\"]]` is not valid","D":"これらすべて有効です"},"correctAnswer":"A","answerExplanation":"JavaScriptでは、すべてのオブジェクトキーは文字列です（Symbolでない限り）。たとえそれを文字列として入力していなくても、それらは常にフードの下で文字列に変換されます。\n\nJavaScriptは、ステートメントを解釈（または、ボックス解除）します。大括弧表記を使用すると、最初の左大括弧 `[`を見て、右大括弧 `]`が見つかるまで進みます。その時だけ、そのステートメントを評価します。\n\n`mouse [bird.size]`： まず最初に、`bird.size`が評価されます。これは文字列の `\"small\"`となります。 `mouse[\"small\"]`は、`true`を返します。\n\nしかし、ドット表記では、これは起こりません。 `mouse`は`bird`と呼ばれるキーを持っていません。 つまり`mouse.bird`は`undefined`となります。\n\nまた、ドット表記を使って `size`を求めます： `mouse.bird.size`。 mouse.birdは未定義なので、実際にはundefined.sizeを要求しています。これは有効ではないので、`Cannot read property \"size\" of undefined`ような、エラーをスローします。"},{"id":6,"question":" 何が出力されるでしょうか？","codeSnippet":"let c = { greeting: \"Hey!\" };\nlet d;\n\nd = c;\nc.greeting = \"Hello\";\nconsole.log(d.greeting);","answerOptions":{"A":"`Hello`","B":"`Hey`","C":"`undefined`","D":"`ReferenceError`","E":"`TypeError`"},"correctAnswer":"A","answerExplanation":"JavaScriptでは、すべてのオブジェクトは互いに等しく設定すると参照によって相互作用します。\n\nまず、変数`c`は、オブジェクトに対する値を保持します。その後、`c`オブジェクトに対して持っている値と同じ参照で`d`に代入します。\n\n<img src=\"https://i.imgur.com/ko5k0fs.png\" width=\"200\">\n\n1つのオブジェクトを変更すると、それらすべてが変更されます。"},{"id":7,"question":" 何が出力されるでしょうか？","codeSnippet":"let a = 3;\nlet b = new Number(3);\nlet c = 3;\n\nconsole.log(a == b);\nconsole.log(a === b);\nconsole.log(b === c);","answerOptions":{"A":"`true` `false` `true`","B":"`false` `false` `true`","C":"`true` `false` `false`","D":"`false` `true` `true`"},"correctAnswer":"C","answerExplanation":"`new Number()`は、組み込み関数のコンストラクタです。数字のように見えますが、実際には数字ではありません。たくさんの追加機能があり、それはオブジェクトとなります。\n\n`==`演算子を使うとき、同じ値を持っているかどうか？ をチェックするだけとなります。それらは両方とも`3`の値を持っているので、それは`true`を返します。\n\nしかし、`===`演算子を使う時は、値と型は同じであるべきです。 そうでないので: `new Number()`は数値ではなく、**オブジェクト**となります。なので、両方ともfalseを返します。"},{"id":8,"question":" 何が出力されるでしょうか？","codeSnippet":"class Chameleon {\n  static colorChange(newColor) {\n    this.newColor = newColor;\n    return this.newColor;\n  }\n\n  constructor({ newColor = \"green\" } = {}) {\n    this.newColor = newColor;\n  }\n}\n\nconst freddie = new Chameleon({ newColor: \"purple\" });\nfreddie.colorChange(\"orange\");","answerOptions":{"A":"`orange`","B":"`purple`","C":"`green`","D":"`TypeError`"},"correctAnswer":"D","answerExplanation":"`colorChange`関数は静的です。静的メソッドは、それらが作成されたコンストラクタ上でのみ動作するように設計されており、どの子達にも受け継がれません。 `freddie`は子となりますので、この関数は受け継がれず、`freddie`インスタンスでは利用できません。\n\nその結果、`TypeError`が投げられます。"},{"id":9,"question":" 何が出力されるでしょうか？","codeSnippet":"let greeting;\ngreetign = {}; // Typo!\nconsole.log(greetign);","answerOptions":{"A":"`{}`","B":"`ReferenceError: greetign is not defined`","C":"`undefined`"},"correctAnswer":"A","answerExplanation":"グローバルオブジェクトに、空のオブジェクトを作成したばかりなので、オブジェクトはログ出力されます。`greeting`を`greetign`と誤って入力した場合、JSインタプリタは実際にこれを `global.greetign = {}`（またはブラウザの `window.greetign = {}`）と見なします。\n\nこれを避けるために、\"use strict\"を使用する事ができます。これにより、変数を何かに設定する前に、変数宣言したことを確認できます。"},{"id":10,"question":" これを行うと、どうなりますか？","codeSnippet":"function bark() {\n  console.log(\"Woof!\");\n}\n\nbark.animal = \"dog\";","answerOptions":{"A":"何も起こらない、これは全く問題ない！","B":"`SyntaxError`. この方法で関数にプロパティを追加することはできません。","C":"`undefined`","D":"`ReferenceError`"},"correctAnswer":"A","answerExplanation":"関数はオブジェクトとなるので、これはJavaScriptで可能です。（プリミティブ型以外はすべてオブジェクトです。）\n\n関数は特別な種類のオブジェクトです。自分で書いたコードは実際の機能ではありません。関数はプロパティを持つオブジェクトです。よって、このプロパティは呼び出し可能となります。"},{"id":11,"question":" 何が出力されるでしょうか？","codeSnippet":"function Person(firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n}\n\nconst member = new Person(\"Lydia\", \"Hallie\");\nPerson.getFullName = function() {\n  return `${this.firstName} ${this.lastName}`;\n};\n\nconsole.log(member.getFullName());","answerOptions":{"A":"`TypeError`","B":"`SyntaxError`","C":"`Lydia Hallie`","D":"`undefined` `undefined`"},"correctAnswer":"A","answerExplanation":"通常のオブジェクトのようにコンストラクタにプロパティを追加することはできません。一度にすべてのオブジェクトに機能を追加したい場合は、代わりにプロトタイプを使用する必要があります。だからこの場合は、\n\n```js\nPerson.prototype.getFullName = function() {\n  return `${this.firstName} ${this.lastName}`;\n};\n```\n\nで、`member.getFullName()`が、機能するはずです。これはなぜ有益なのでしょうか。例えば、このメソッドをコンストラクタ自体に追加したとします。すべての`Person`インスタンスがこのメソッドを必要としなかったのかもしれません。\n\nその場合、多くのメモリスペースを浪費する事でしょう。なぜならそれらはまだその特性を持ち、それは各インスタンスのためにメモリスペースを消費するからです。\n\nその代わりに、プロトタイプに追加するだけであれば、メモリ内の1箇所に配置するだけで、すべてのユーザーがアクセスできます。"},{"id":12,"question":" 何が出力されるでしょうか？","codeSnippet":"function Person(firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n}\n\nconst lydia = new Person(\"Lydia\", \"Hallie\");\nconst sarah = Person(\"Sarah\", \"Smith\");\n\nconsole.log(lydia);\nconsole.log(sarah);","answerOptions":{"A":"`Person {firstName: \"Lydia\", lastName: \"Hallie\"}` と `undefined`","B":"`Person {firstName: \"Lydia\", lastName: \"Hallie\"}` と `Person {firstName: \"Sarah\", lastName: \"Smith\"}`","C":"`Person {firstName: \"Lydia\", lastName: \"Hallie\"}` と `{}`","D":"`Person {firstName: \"Lydia\", lastName: \"Hallie\"}` と `ReferenceError`"},"correctAnswer":"A","answerExplanation":"`sarah`では、`new`キーワードを使いませんでした。`new`を使用した場合、作成した新しい空のオブジェクトを参照します。しかし、`new`を追加しなければ、それは**グローバルオブジェクト**を参照することとなります。\n\n`this.firstName`に`\"Sarah\"`を代入、`this.lastName`に`\"Smith\"`を代入したつもりでしたが、実際に行った事は、`global.firstName = 'Sarah'` と、`global.lastName = 'Smith'`を定義したのです。\n\n`sarah`自体は` undefined`のままです。"},{"id":13,"question":" イベント伝播の3つの段階はどれですか？","codeSnippet":null,"answerOptions":{"A":"Target > Capturing > Bubbling","B":"Bubbling > Target > Capturing","C":"Target > Bubbling > Capturing","D":"Capturing > Target > Bubbling"},"correctAnswer":"D","answerExplanation":"**capture**フェーズの間、イベントは先祖の要素を通過してターゲットの要素になります。それから**target**要素に達した後、**バブリング**が開始されます。\n\n<img src=\"https://i.imgur.com/N18oRgd.png\" width=\"200\">"},{"id":14,"question":" すべてのオブジェクトはプロトタイプを持っています。","codeSnippet":null,"answerOptions":{"A":"true","B":"false"},"correctAnswer":"B","answerExplanation":"**基本オブジェクト**を除き、すべてのオブジェクトにプロトタイプがあります。ベースオブジェクトは`.toString`のようないくつかのメソッドとプロパティにアクセスできます。\n\nこれが、組み込みのJavaScriptメソッドを使用できる理由です。このような方法はすべてプロトタイプで利用できます。 \n\nJavaScriptはそれをあなたのオブジェクト上で直接見つけることはできませんが、プロトタイプチェーンをたどり、見つけます。"},{"id":15,"question":" 何が出力されるでしょうか？","codeSnippet":"function sum(a, b) {\n  return a + b;\n}\n\nsum(1, \"2\");","answerOptions":{"A":"`NaN`","B":"`TypeError`","C":"`\"12\"`","D":"`3`"},"correctAnswer":"C","answerExplanation":"JavaScriptは、**動的に型付けされた言語**です。: 特定の変数がどんな型であるかは指定しません。知らないうちに、値が自動的に別の型に変換されることがあります。この事を`implicit type coercion`と呼ばれてます。 **Coercion**は、ある型から別の型に変換しています。\n\nこの例では、関数が意味を成して値を返すために、JavaScriptは数字の`1`を文字列に変換します。数値型（`1`）と 文字列型（`'2'`）の追加中は、数字は文字列として扱われます。 \n\n`\"Hello\"+\"World\"`のように文字列を連結することができるので、ここで起こっているのは`\"1\"+\"2\"`で、これは `\"12\"`を返します。"},{"id":16,"question":" 何が出力されるでしょうか？","codeSnippet":"let number = 0;\nconsole.log(number++);\nconsole.log(++number);\nconsole.log(number);","answerOptions":{"A":"`1` `1` `2`","B":"`1` `2` `2`","C":"`0` `2` `2`","D":"`0` `1` `2`"},"correctAnswer":"C","answerExplanation":"**接尾辞** 単項演算子 `++`：\n\n1.値を返す（これは`0`を返す）\n2.値を増やす（numberは現在`1`です）\n\n**接頭辞** 単項演算子 `++`：\n\n1.値を増やす（数値は2になります）\n2.値を返す（これは`2`を返します）\n\nこれは`0 2 2`を返します。"},{"id":17,"question":" 何が出力されるでしょうか？","codeSnippet":"function getPersonInfo(one, two, three) {\n  console.log(one);\n  console.log(two);\n  console.log(three);\n}\n\nconst person = \"Lydia\";\nconst age = 21;\n\ngetPersonInfo`${person} is ${age} years old`;","answerOptions":{"A":"`\"Lydia\"` `21` `[\"\", \" is \", \" years old\"]`","B":"`[\"\", \" is \", \" years old\"]` `\"Lydia\"` `21`","C":"`\"Lydia\"` `[\"\", \" is \", \" years old\"]` `21`"},"correctAnswer":"B","answerExplanation":"タグ付きテンプレートリテラルを使用する場合、最初の引数の値は常に文字列値の配列です。残りの引数は渡された式の値を取得します。"},{"id":18,"question":" 何が出力されるでしょうか？","codeSnippet":"function checkAge(data) {\n  if (data === { age: 18 }) {\n    console.log(\"You are an adult!\");\n  } else if (data == { age: 18 }) {\n    console.log(\"You are still an adult.\");\n  } else {\n    console.log(`Hmm.. You don't have an age I guess`);\n  }\n}\n\ncheckAge({ age: 18 });","answerOptions":{"A":"`You are an adult!`","B":"`You are still an adult.`","C":"`Hmm.. You don't have an age I guess`"},"correctAnswer":"C","answerExplanation":"等価性をテストするとき、プリミティブはそれらの値によって比較され、オブジェクトはそれらの参照によって比較されます。 JavaScriptは、オブジェクトがメモリ内の同じ場所への参照を持っているかどうかを確認します。\n\n比較している2つのオブジェクトにはそれがありません。パラメータとして渡したオブジェクトが、等価性を確認するために使用したオブジェクトとは異なるメモリ内の場所を参照しています。\n\nこれが `{ age: 18 } === { age: 18 }`と、`{ age: 18 } == { age: 18 }`の両方が、`false`を返す理由です。"},{"id":19,"question":" 何が出力されるでしょうか？","codeSnippet":"function getAge(...args) {\n  console.log(typeof args);\n}\n\ngetAge(21);","answerOptions":{"A":"`\"number\"`","B":"`\"array\"`","C":"`\"object\"`","D":"`\"NaN\"`"},"correctAnswer":"C","answerExplanation":"スプレッド演算子(`... args`.)は、引数付きの配列を返します。配列はオブジェクトなので、`typeof args`は、`\"object\"`を返します。"},{"id":20,"question":" 何が出力されるでしょうか？","codeSnippet":"function getAge() {\n  \"use strict\";\n  age = 21;\n  console.log(age);\n}\n\ngetAge();","answerOptions":{"A":"`21`","B":"`undefined`","C":"`ReferenceError`","D":"`TypeError`"},"correctAnswer":"C","answerExplanation":"`\"use strict\"`を使うと、誤ってグローバル変数を宣言しないようにすることができます。変数`age`を宣言したことは一度もありませんし、`\"use strict\"`を使っているので参照エラーになります。 \n\n`\"use strict\"`を使用しなかった場合は、プロパティ`age`がグローバルオブジェクトに追加されたことになるので、それは機能します。"},{"id":21,"question":" sumの値は何？","codeSnippet":"const sum = eval(\"10*10+5\");","answerOptions":{"A":"`105`","B":"`\"105\"`","C":"`TypeError`","D":"`\"10*10+5\"`"},"correctAnswer":"A","answerExplanation":"`eval`は文字列として渡されたコードを評価します。この場合のように式であれば、その式を評価します。表現は`10 * 10 + 5`です。これは`105`を返します。"},{"id":22,"question":" cool_secretは、どのくらいの期間アクセス可能ですか？","codeSnippet":"sessionStorage.setItem(\"cool_secret\", 123);","answerOptions":{"A":"永遠に、データが失われることはありません。","B":"ユーザーがタブを閉じる時","C":"ユーザーがタブだけでなくブラウザ全体を閉じる時。","D":"ユーザーが自分のコンピュータをシャットダウンした時。"},"correctAnswer":"B","answerExplanation":"`sessionStorage`に格納されたデータは、タブを閉じた後に削除されます。\n\n`localStorage`を使用した場合は、`localStorage.clear()`などが呼び出されない限り、データは永久に存在しているでしょう。"},{"id":23,"question":" 何が出力されるでしょうか？","codeSnippet":"var num = 8;\nvar num = 10;\n\nconsole.log(num);","answerOptions":{"A":"`8`","B":"`10`","C":"`SyntaxError`","D":"`ReferenceError`"},"correctAnswer":"B","answerExplanation":"`var`キーワードを使うと、同じ名前で複数の変数を宣言できます。変数は最新の値を保持します。\n\nブロックスコープの`let`や`const`では、できません。"},{"id":24,"question":" 何が出力されるでしょうか？","codeSnippet":"const obj = { 1: \"a\", 2: \"b\", 3: \"c\" };\nconst set = new Set([1, 2, 3, 4, 5]);\n\nobj.hasOwnProperty(\"1\");\nobj.hasOwnProperty(1);\nset.has(\"1\");\nset.has(1);","answerOptions":{"A":"`false` `true` `false` `true`","B":"`false` `true` `true` `true`","C":"`true` `true` `false` `true`","D":"`true` `true` `true` `true`"},"correctAnswer":"C","answerExplanation":"すべてのオブジェクトキー（Symbolsを除く）は、文字列として自分で入力しなくても、内部では文字列です。これが、`obj.hasOwnProperty('1')`も​​trueを返す理由です。\n\nsetではそうはいきません。上記のsetには`'1'` はありません: `set.has('1')`は、`false`を返します。数値型`1`の`set.has(1)`は、`true`を返します。"},{"id":25,"question":" 何が出力されるでしょうか？","codeSnippet":"const obj = { a: \"one\", b: \"two\", a: \"three\" };\nconsole.log(obj);","answerOptions":{"A":"`{ a: \"one\", b: \"two\" }`","B":"`{ b: \"two\", a: \"three\" }`","C":"`{ a: \"three\", b: \"two\" }`","D":"`SyntaxError`"},"correctAnswer":"C","answerExplanation":"同じ名前のキーが2つある場合、最初の位置にあるキーは置き換えられ、最後に指定された値になります。"},{"id":26,"question":" JavaScriptのglobal execution contextは、2つを作成します。: それはグローバルオブジェクトと \"this\"キーワードです。","codeSnippet":null,"answerOptions":{"A":"true","B":"false","C":"場合によりけり"},"correctAnswer":"A","answerExplanation":"基本的なexecution contextは、グローバルな実行コンテキストです。それはあなたのコードの至る所でアクセス可能なものです。"},{"id":27,"question":" 何が出力されるでしょうか？","codeSnippet":"for (let i = 1; i < 5; i++) {\n  if (i === 3) continue;\n  console.log(i);\n}","answerOptions":{"A":"`1` `2`","B":"`1` `2` `3`","C":"`1` `2` `4`","D":"`1` `3` `4`"},"correctAnswer":"C","answerExplanation":"`continue`ステートメントは、ある条件が`true`を返すと、繰り返し処理をスキップします。"},{"id":28,"question":" 何が出力されるでしょうか？","codeSnippet":"String.prototype.giveLydiaPizza = () => {\n  return \"Just give Lydia pizza already!\";\n};\n\nconst name = \"Lydia\";\n\nname.giveLydiaPizza();","answerOptions":{"A":"`\"Just give Lydia pizza already!\"`","B":"`TypeError: not a function`","C":"`SyntaxError`","D":"`undefined`"},"correctAnswer":"A","answerExplanation":"`String`はプロパティを追加することができる組み込みコンストラクタです。プロトタイプにメソッドを追加しました。\n\nプリミティブ文字列は、文字列プロトタイプ関数によって生成された文字列オブジェクトに自動的に変換されます。\n\nつまり、すべての文字列（文字列オブジェクト）がそのメソッドにアクセスできます。"},{"id":29,"question":" 何が出力されるでしょうか？","codeSnippet":"const a = {};\nconst b = { key: \"b\" };\nconst c = { key: \"c\" };\n\na[b] = 123;\na[c] = 456;\n\nconsole.log(a[b]);","answerOptions":{"A":"`123`","B":"`456`","C":"`undefined`","D":"`ReferenceError`"},"correctAnswer":"B","answerExplanation":"オブジェクトキーは自動的に文字列に変換されます。オブジェクトaのキーとして、値123で設定しようとしています。\n\nしかし、オブジェクトを文字列化すると、それは`\"[object Object]\"`​​になってしまいます。なので、ここで行っているのは、 `a[\"object Object\"] = 123`です。\n\nその後、同じことをもう一度試みています。`c`は暗黙のうちに文字列化している別のオブジェクトです。そのため、`a[\"object Object\"] = 456`となります。\n\nその後、`a[b]`でログ出力。実際には`a[\"object Object\"]`です。これを `456`に設定しただけなので、`456`を返します。"},{"id":30,"question":" 何が出力されるでしょうか？","codeSnippet":"const foo = () => console.log(\"First\");\nconst bar = () => setTimeout(() => console.log(\"Second\"));\nconst baz = () => console.log(\"Third\");\n\nbar();\nfoo();\nbaz();","answerOptions":{"A":"`First` `Second` `Third`","B":"`First` `Third` `Second`","C":"`Second` `First` `Third`","D":"`Second` `Third` `First`"},"correctAnswer":"B","answerExplanation":"`setTimeout`関数があり、それを最初に呼び出したのですが、それは最後にログ出力されました。\n\nこれは、ブラウザにはランタイムエンジンがあるだけでなく、`WebAPI`と呼ばれるものもあるからです。`WebAPI`は最初に`setTimeout`関数を与えてくれます。例えばDOMです。\n\ncallbackがWebAPIにプッシュされた後、`setTimeout`関数自体（コールバックではありません!）がスタックからポップされます。\n\n<img src=\"https://i.imgur.com/X5wsHOg.png\" width=\"200\">\n\n今、`foo`が呼び出され、`\"First\"`が、ログ出力されています。\n\n<img src=\"https://i.imgur.com/Pvc0dGq.png\" width=\"200\">\n\n`foo`がスタックからポップされ、`baz`が呼び出されます。`\"Third\"`が、ログ出力されます。\n\n<img src=\"https://i.imgur.com/WhA2bCP.png\" width=\"200\">\n\nWebAPIは、準備が整ったときにスタックに、なにかを追加することはできません。代わりに、コールバック関数を`queue`と呼ばれるものにプッシュします。\n\n<img src=\"https://i.imgur.com/NSnDZmU.png\" width=\"200\">\n\nevent loopが機能し始めるところです。 **event loop**はスタックとタスクキューを調べます。スタックが空の場合は、キューの最初のものを取り出し、それをスタックにプッシュします。\n\n<img src=\"https://i.imgur.com/uyiScAI.png\" width=\"200\">\n\n`bar`が呼び出され、`\"Second\"`がログ出力され、スタックからポップされます。"},{"id":31,"question":" ボタンをクリックしたときのevent.targetは何ですか？","codeSnippet":"html\n<div onclick=\"console.log('first div')\">\n  <div onclick=\"console.log('second div')\">\n    <button onclick=\"console.log('button')\">\n      Click!\n    </button>\n  </div>\n</div>","answerOptions":{"A":"外側 `div`","B":"内側 `div`","C":"`button`","D":"ネストしたすべての要素の配列"},"correctAnswer":"C","answerExplanation":"イベントを引き起こした最も深くネストした要素がイベントのターゲットとなります。`event.stopPropagation`でバブリングを止めることができます"},{"id":32,"question":" p要素をクリックすると、ログ出力はどうなりますか。","codeSnippet":"html\n<div onclick=\"console.log('div')\">\n  <p onclick=\"console.log('p')\">\n    Click here!\n  </p>\n</div>","answerOptions":{"A":"`p` `div`","B":"`div` `p`","C":"`p`","D":"`div`"},"correctAnswer":"A","answerExplanation":"`p`をクリックすると、`p`と`div`の2つのログが表示されます。イベント伝播中は、キャプチャ、ターゲット、バブリングの3つのフェーズがあります。\n\nデフォルトでは、イベントハンドラはバブリング段階で実行されます（`useCapture`を`true`に設定しない限り）。最も深くネストした要素から外側に向かって進みます。"},{"id":33,"question":" 何が出力されるでしょうか？","codeSnippet":"const person = { name: \"Lydia\" };\n\nfunction sayHi(age) {\n  console.log(`${this.name} is ${age}`);\n}\n\nsayHi.call(person, 21);\nsayHi.bind(person, 21);","answerOptions":{"A":"`undefined is 21` `Lydia is 21`","B":"`function` `function`","C":"`Lydia is 21` `Lydia is 21`","D":"`Lydia is 21` `function`"},"correctAnswer":"D","answerExplanation":"両方とも、`this`キーワードが参照したいオブジェクトを渡すことができます。しかし、`.call`もすぐに実行されます。\n\n`.bind.`は関数のコピーを返しますが、コンテキストは束縛されています。すぐには実行されません。"},{"id":34,"question":" 何が出力されるでしょうか？","codeSnippet":"function sayHi() {\n  return (() => 0)();\n}\n\ntypeof sayHi();","answerOptions":{"A":"`\"object\"`","B":"`\"number\"`","C":"`\"function\"`","D":"`\"undefined\"`"},"correctAnswer":"B","answerExplanation":"`sayHi`関数は、即時呼び出し関数式（IIFE）の戻り値を返します。この関数は`0`を返しました。それは`\"number\"`型です。\n\n参考：7つの組み込み型しかありません： `null`, `undefined`, `boolean`, `number`, `string`, `object`, `symbol`, そして `bigint`。関数はオブジェクトなので、`\"function\"`型ではなく`\"object\"`型です。"},{"id":35,"question":" これらの値のどれがfalsyですか？","codeSnippet":"0;\nnew Number(0);\n(\"\");\n(\" \");\nnew Boolean(false);\nundefined;","answerOptions":{"A":"`0`, `''`, `undefined`","B":"`0`, `new Number(0)`, `''`, `new Boolean(false)`, `undefined`","C":"`0`, `''`, `new Boolean(false)`, `undefined`","D":"これらすべてfalsy"},"correctAnswer":"A","answerExplanation":"falsyの値は6つだけです。\n\n- `undefined`\n- `null`\n- `NaN`\n- `0`\n- `''` (empty string)\n- `false`\n\n`new Number`や、`new Boolean`のような関数コンストラクタはtruthyです。"},{"id":36,"question":" 何が出力されるでしょうか？","codeSnippet":"console.log(typeof typeof 1);","answerOptions":{"A":"`\"number\"`","B":"`\"string\"`","C":"`\"object\"`","D":"`\"undefined\"`"},"correctAnswer":"B","answerExplanation":"`typeof 1`は、`\"number\"`を返します。\n\n`typeof \"number\"`は、`\"string\"`を返します。"},{"id":37,"question":" 何が出力されるでしょうか？","codeSnippet":"const numbers = [1, 2, 3];\nnumbers[10] = 11;\nconsole.log(numbers);","answerOptions":{"A":"`[1, 2, 3, 7 x null, 11]`","B":"`[1, 2, 3, 11]`","C":"`[1, 2, 3, 7 x empty, 11]`","D":"`SyntaxError`"},"correctAnswer":"C","answerExplanation":"配列の長さを超える値を配列内の要素に設定すると、JavaScriptでは、\"empty slots\"と呼ばれるものを作成します。これらは実際には、`undefined`の値を持ちますが、あなたは以下のようなものを見るでしょう\n\n`[1, 2, 3, 7 x empty, 11]`\n\n実行場所によって異なります（browser、nodeなどによって異なります）。"},{"id":38,"question":" 何が出力されるでしょうか？","codeSnippet":"(() => {\n  let x, y;\n  try {\n    throw new Error();\n  } catch (x) {\n    (x = 1), (y = 2);\n    console.log(x);\n  }\n  console.log(x);\n  console.log(y);\n})();","answerOptions":{"A":"`1` `undefined` `2`","B":"`undefined` `undefined` `undefined`","C":"`1` `1` `2`","D":"`1` `undefined` `undefined`"},"correctAnswer":"A","answerExplanation":"`catch`ブロックは引数`x`を受け取ります。これは引数を渡すときの変数と同じ`x`ではありません。この変数`x`はブロックスコープです。\n\n後に、このブロックスコープ変数を`1`に設定し、変数`y`の値を設定します。ここで、ブロックスコープ変数`x`をログ出力します。これは`1`となります。\n\n`catch`ブロック以外では、`x`は未定義、`y`は2です。 `catch`ブロックの外側で`console.log(x)`した場合は、`undefined`を返し、`y`は`2`を返します。"},{"id":39,"question":" JavaScriptのすべてはどちらかです...","codeSnippet":null,"answerOptions":{"A":"primitive か object","B":"function か object","C":"ひっかけ問題! objectsのみ","D":"number か object"},"correctAnswer":"A","answerExplanation":"JavaScriptにはプリミティブ型とオブジェクトしかありません。\n\nプリミティブ型は、`boolean`, `null`, `undefined`, `bigint`, `number`, `string`, そして`symbol`です。\n\nプリミティブとオブジェクトを区別するのは、プリミティブにはプロパティもメソッドもないということです。\n\nただし、`'foo'.toUpperCase()`は`'FOO'`と評価され、`TypeError`にはなりません。これは、文字列のようなプリミティブのプロパティやメソッドにアクセスしようとすると、JavaScriptがラッパークラスの1つ、すなわち`String`を使ってオブジェクトを暗黙的にラップし、式が評価された後ラッパーを直ちに破棄するためです。 \n\n`null`と`undefined`を除くすべてのプリミティブはこの振る舞いをします。"},{"id":40,"question":" 何が出力されるでしょうか？","codeSnippet":"[[0, 1], [2, 3]].reduce(\n  (acc, cur) => {\n    return acc.concat(cur);\n  },\n  [1, 2]\n);","answerOptions":{"A":"`[0, 1, 2, 3, 1, 2]`","B":"`[6, 1, 2]`","C":"`[1, 2, 0, 1, 2, 3]`","D":"`[1, 2, 6]`"},"correctAnswer":"C","answerExplanation":"`[1,2]`は初期値です。これが最初の値で、一番最初の`acc`の値です。最初の周回の間、`acc`は`[1,2]`で、`cur`は`[0,1]`です。それらを連結すると、結果として`[1、2、0、1]`となります。\n\nそして、`[1, 2, 0, 1]`の`acc`と`[2, 3]`の`cur`を連結して`[1, 2, 0, 1, 2, 3]`を得ます"},{"id":41,"question":" 何が出力されるでしょうか？","codeSnippet":"!!null;\n!!\"\";\n!!1;","answerOptions":{"A":"`false` `true` `false`","B":"`false` `false` `true`","C":"`false` `true` `true`","D":"`true` `true` `false`"},"correctAnswer":"B","answerExplanation":"`null`はfalsyです。`!null`は`true`を返します。`!true`は`false`を返します。\n\n`\"\"`はfalsyです。`!\"\"`は`true`を返します。`!true`は`false`を返します。\n\n`1`はtruthyです。`!1`は`false`を返します。`!false`は`true`を返します。"},{"id":42,"question":" `setInterval`メソッドはブラウザに何を返しますか？","codeSnippet":"setInterval(() => console.log(\"Hi\"), 1000);","answerOptions":{"A":"ユニークid","B":"指定されたミリ秒数","C":"渡された関数","D":"`undefined`"},"correctAnswer":"A","answerExplanation":"一意のIDを返します。このIDは `clearInterval()`関数で、その間隔をクリアするために使うことができます。"},{"id":43,"question":" これは何を返しますか？","codeSnippet":"[...\"Lydia\"];","answerOptions":{"A":"`[0, 10], [10, 20]`","B":"`20, 20`","C":"`10, 20`","D":"`0, 10 and 10, 20`"},"correctAnswer":"A","answerExplanation":"文字列はイテラブルです。スプレッド演算子は、イテラブルのすべての文字を1つの要素にマッピングします。"},{"id":44,"question":" これは何を返しますか？","codeSnippet":"const firstPromise = new Promise((res, rej) => {\n  setTimeout(res, 500, \"one\");\n});\n\nconst secondPromise = new Promise((res, rej) => {\n  setTimeout(res, 100, \"two\");\n});\n\nPromise.race([firstPromise, secondPromise]).then(res => console.log(res));","answerOptions":{"A":"`\"one\"`","B":"`\"two\"`","C":"`\"two\" \"one\"`","D":"`\"one\" \"two\"`"},"correctAnswer":"B","answerExplanation":"複数のプロミスを`Promise.race`メソッドに渡した時、\"resolves/rejects\"は、\"最初\"のプロミスの\"resolves/rejects\"を行います。\n\n`setTimeout`メソッドには、タイマーを渡します: 最初のプロミスには500ms(`firstPromise`)、2番目のプロミスには100ms(`secondPromise`)。\n\nこれは、`secondPromise`が最初に`'two'`の値で解決されることを意味します。`res`は`'two'`の値を保持するようになり、ログ出力されます。"},{"id":45,"question":" 何が出力されるでしょうか？","codeSnippet":"let person = { name: \"Lydia\" };\nconst members = [person];\nperson = null;\n\nconsole.log(members);","answerOptions":{"A":"`null`","B":"`[null]`","C":"`[{}]`","D":"`[{ name: \"Lydia\" }]`"},"correctAnswer":"D","answerExplanation":"まず、`name`プロパティを持つオブジェクトの値を使って、変数`person`を宣言します。\n\n<img src=\"https://i.imgur.com/TML1MbS.png\" width=\"200\">\n\nそれから、`members`という変数を宣言します。その配列の最初の要素に、変数`person`の値を代入します。オブジェクトは、互いをイコールで設定すると、「参照」によって相互作用します。\n\nある変数から別の変数への\"参照\"を代入すると、その参照の\"コピー\"が作成されます。 (それらは、\"同じ参照\"を持っていないことに注意してください！)\n\n<img src=\"https://i.imgur.com/FSG5K3F.png\" width=\"300\">\n\nそして、変数`person`を`null`に設定します。\n\n<img src=\"https://i.imgur.com/sYjcsMT.png\" width=\"300\">\n\nその要素はオブジェクトへの異なる（コピーされた）参照を持っているので、`person`変数の値を変更するだけで配列の最初の要素は変更されません。 `members`の最初の要素はまだ元のオブジェクトへの参照を保持しています。\n \n`members`配列をログ出力したとき、最初の要素はまだオブジェクトの値を保持しているので、それがログ出力されます。"},{"id":46,"question":" 何が出力されるでしょうか？","codeSnippet":"const person = {\n  name: \"Lydia\",\n  age: 21\n};\n\nfor (const item in person) {\n  console.log(item);\n}","answerOptions":{"A":"`{ name: \"Lydia\" }, { age: 21 }`","B":"`\"name\", \"age\"`","C":"`\"Lydia\", 21`","D":"`[\"name\", \"Lydia\"], [\"age\", 21]`"},"correctAnswer":"B","answerExplanation":"この場合、`for-in`ループを使うと、オブジェクトキーである`name`と`age`の繰り返し処理できます。内部的には、オブジェクトキーは文字列です（シンボルではない場合）。\n\nすべてのループで、`item`の値は反復している現在のキーに設定されます。まず、`item`は`name`が代入され、ログに出力されます。その後、`item`は`age`が代入され、ログに出力されます。"},{"id":47,"question":" 何が出力されるでしょうか？","codeSnippet":"console.log(3 + 4 + \"5\");","answerOptions":{"A":"`\"345\"`","B":"`\"75\"`","C":"`12`","D":"`\"12\"`"},"correctAnswer":"B","answerExplanation":"演算子結合性は、コンパイラーが式を評価する順序（左から右または右から左）となります。これは、すべての演算子が同じ優先順位を持つ場合にのみ発生します。演算子の種類は1つだけです: `+`。さらに、結合性は左から右です。\n\n`3 + 4`が最初に評価されます。これは数字の`7`になります。\n\n`7 + '5'`は、強制的に`\"75\"`になります。 JavaScriptでは、数字の`7`を文字列に変換します。質問15を参照してください。2つの文字列を演算子の`+`を使って連結することができます。よって、`\"7\" + \"5\"`は、`\"75\"`になります。"},{"id":48,"question":" numの値は何ですか？","codeSnippet":"const num = parseInt(\"7*6\", 10);","answerOptions":{"A":"`42`","B":"`\"42\"`","C":"`7`","D":"`NaN`"},"correctAnswer":"C","answerExplanation":"文字列の最初の数字だけが返されます。\"基数\"（解析する数値の種類を指定するための2番目の引数: 基数10, 16進数, 8進数, 2進数など）に基づいて、`parseInt`は文字列内の文字が有効かどうかをチェックします。基数の中で有効な数字ではない文字に出会うと、構文解析を停止して次の文字を無視します。\n\n`*`は、有効な数字ではありません。`\"7\"`を、10進数の`7`に解析するだけです。そのままnumは`7`の値を保持します。"},{"id":49,"question":" 何が出力されるでしょうか？","codeSnippet":"[1, 2, 3].map(num => {\n  if (typeof num === \"number\") return;\n  return num * 2;\n});","answerOptions":{"A":"`[]`","B":"`[null, null, null]`","C":"`[undefined, undefined, undefined]`","D":"`[ 3 x empty ]`"},"correctAnswer":"C","answerExplanation":"配列をマッピングするとき、`num`の値に代入されるのは、ループで渡ってくる要素となります。この場合、要素は数値なので、ifステートメント `typeof num === \"number\"`の条件は`true`を返します。 map関数は新しい配列を作成して関数から返された値を挿入します。\n\nただし、値は返されません。関数から値を返さないと、関数は`undefined`を返します。配列内のすべての要素に対して関数ブロックが呼び出されるので、各要素に対して`undefined`を返します。"},{"id":50,"question":" 何が出力されるでしょうか？","codeSnippet":"function getInfo(member, year) {\n  member.name = \"Lydia\";\n  year = 1998;\n}\n\nconst person = { name: \"Sarah\" };\nconst birthYear = \"1997\";\n\ngetInfo(person, birthYear);\n\nconsole.log(person, birthYear);","answerOptions":{"A":"`{ name: \"Lydia\" }, \"1997\"`","B":"`{ name: \"Sarah\" }, \"1998\"`","C":"`{ name: \"Lydia\" }, \"1998\"`","D":"`{ name: \"Sarah\" }, \"1997\"`"},"correctAnswer":"A","answerExplanation":"値がオブジェクトでない限り、引数は\"値\"によって渡され、その後、\"参照\"によって渡されます。 `birthYear`はオブジェクトではなく文字列なので、値で渡されます。引数を値で渡すと、その値の\"コピー\"が作成されます（質問46を参照）。\n\n変数`birthYear`は、値`\"1997\"`への参照を持ちます。引数`year`は、値`\"1997\"`も参照していますが、それは`birthYear`が参照しているのと同じ値ではありません。`year`に`\"1998\"`を代入することによって`year`の値を更新したとしても、`year`の値を更新するだけです。`birthYear`はまだ`\"1997\"`となります。\n\n`person`の値はオブジェクトです。引数`member`は\"同じ\"オブジェクトへの（コピーされた）参照を持ちます。\n\n`member`が参照を持つオブジェクトのプロパティを変更すると、`person`の値も変更されます。これらは両方とも同じオブジェクトへの参照を持つからです。`person`の`name`プロパティは、値の`\"Lydia\"`となりました。"},{"id":51,"question":" 何が出力されるでしょうか？","codeSnippet":"function greeting() {\n  throw \"Hello world!\";\n}\n\nfunction sayHi() {\n  try {\n    const data = greeting();\n    console.log(\"It worked!\", data);\n  } catch (e) {\n    console.log(\"Oh no an error!\", e);\n  }\n}\n\nsayHi();","answerOptions":{"A":"`\"It worked! Hello world!\"`","B":"`\"Oh no an error: undefined`","C":"`SyntaxError: can only throw Error objects`","D":"`\"Oh no an error: Hello world!`"},"correctAnswer":"D","answerExplanation":"`throw`ステートメントを使って、カスタムエラーを作ることができます。このステートメントで、あなたは例外を投げることができます。例外は、<b>string</b>, <b>number</b>, <b>boolean</b>, <b>object</b>のいずれかとなります。上記の場合だと、例外は文字列`'Hello world'`となります。\n\n`catch`ステートメントを使って、`try`ブロックで例外が投げられた場合にどうするかを指定できます。例外がスローされます: 文字列`'Hello world'`は、`e`に代入されます。その結果`'Oh an error: Hello world'`となります。"},{"id":52,"question":" 何が出力されるでしょうか？","codeSnippet":"function Car() {\n  this.make = \"Lamborghini\";\n  return { make: \"Maserati\" };\n}\n\nconst myCar = new Car();\nconsole.log(myCar.make);","answerOptions":{"A":"`\"Lamborghini\"`","B":"`\"Maserati\"`","C":"`ReferenceError`","D":"`TypeError`"},"correctAnswer":"B","answerExplanation":"プロパティを返すと、そのプロパティの値は、コンストラクタ関数で設定された値ではなく、\"戻り値\"となります。 `\"Maserati\"`という文字列を返すので、`myCar.make`は `\"Maserati\"`となります。"},{"id":53,"question":" 何が出力されるでしょうか？","codeSnippet":"(() => {\n  let x = (y = 10);\n})();\n\nconsole.log(typeof x);\nconsole.log(typeof y);","answerOptions":{"A":"`\"Woof I am Mara\"`, `TypeError`","B":"`\"Woof I am Mara\"`,`\"Woof I am Mara\"`","C":"`\"Woof I am Mara\"`, `undefined`","D":"`TypeError`, `TypeError`"},"correctAnswer":"A","answerExplanation":"`let x = y = 10;` is actually shorthand for:\n\n```javascript\ny = 10;\nlet x = y;\n```\n\n`y`に`10`を代入すると、実際にはグローバルオブジェクトにプロパティ`y`が追加されます（ブラウザでは`window`、nodeでは`global`）。ブラウザでは、`window.y`は`10`となりました。\n\nそれから、変数`x`を`10`である値`y`で宣言します。`let`キーワードで宣言された変数は\"ブロックスコープ\"となり、宣言されたブロック内でのみ定義されます。この場合は即時関数（IIFE）となります。 \n\n`typeof`演算子使用時、オペランド`x`は定義されていません: 宣言されているブロックの外側で`x`にアクセスしようとしています。これは`x`が定義されていないことを意味します。\n\n値が割り当てられていない、または宣言されていない値は`\"undefined\"`型となります。なので`console.log(typeof x)`は`\"undefined\"`を返します。\n\nyに関しては、`y`に`10`を代入するときにグローバル変数`y`を作成しました。この値は、コード内のどこからでもアクセスできます。`y`が定義されていて、`\"number\"`型の値を保持します。よって`console.log(typeof y)`は`\"number\"`を返します。"},{"id":54,"question":" 何が出力されるでしょうか？","codeSnippet":"const set = new Set([1, 1, 2, 3, 4]);\n\nconsole.log(set);","answerOptions":{"A":"`[1, 1, 2, 3, 4]`","B":"`[1, 2, 3, 4]`","C":"`{1, 1, 2, 3, 4}`","D":"`{1, 2, 3, 4}`"},"correctAnswer":"D","answerExplanation":"`Set`オブジェクトは _unique_ の値の集合です: 値は集合の中で一度だけ現れることができます\n\n値`1`が重複したイテラブル`[1、1、2、3、4]`を渡しました。セット内に同じ値を2つ持つことはできないので、そのうちの1つが削除され`{1、2、3、4}`となります。"},{"id":55,"question":" 何が出力されるでしょうか？","codeSnippet":"// counter.js\nlet counter = 10;\nexport default counter;","answerOptions":{"A":"`10`","B":"`11`","C":"`Error`","D":"`NaN`"},"correctAnswer":"C","answerExplanation":"インポートされたモジュールは読み取り専用です。: インポートされたモジュールを変更することはできません。エクスポートするモジュールだけがその値を変更できます。\n\n`myCounter`の値を増やそうとすると、error: `myCounter` is read-only and cannot be modified. と、エラーがスローされます。"},{"id":56,"question":" 何が出力されるでしょうか？","codeSnippet":"const name = \"Lydia\";\nage = 21;\n\nconsole.log(delete name);\nconsole.log(delete age);","answerOptions":{"A":"`false`, `true`","B":"`\"Lydia\"`, `21`","C":"`true`, `true`","D":"`undefined`, `undefined`"},"correctAnswer":"A","answerExplanation":"`delete`演算子は、ブール値を返します: 正常に削除された場合はtrue、それ以外の場合はfalseを返します。`var`, `const`または`let`キーワードで宣言された変数は`delete`演算子を使って削除することはできません。\n\n`name`変数は`const`キーワードで宣言されているので、削除は成功しません: `false`が返されます。 \n\n`age`を`21`に設定すると、実際にはグローバルオブジェクトに`age`というプロパティを追加されました。グローバルオブジェクトからもプロパティを削除することができますので、`delete age`は`true`を返します。"},{"id":57,"question":" 何が出力されるでしょうか？","codeSnippet":"const numbers = [1, 2, 3, 4, 5];\nconst [y] = numbers;\n\nconsole.log(y);","answerOptions":{"A":"`[[1, 2, 3, 4, 5]]`","B":"`[1, 2, 3, 4, 5]`","C":"`1`","D":"`[1]`"},"correctAnswer":"C","answerExplanation":"配列から値を取り出したり、オブジェクトからプロパティを分解して取り出すことができます。 example:\n\n```javascript\n[a, b] = [1, 2];\n```\n\n<img src=\"https://i.imgur.com/ADFpVop.png\" width=\"200\">\n\n`a`の値は`1`となり、`b`の値は`2`となる。実際に問題で行った事は、\n\n```javascript\n[y] = [1, 2, 3, 4, 5];\n```\n\n<img src=\"https://i.imgur.com/NzGkMNk.png\" width=\"200\">\n\n`y`の値が配列の最初の値、つまり`1`に等しいことを意味します。`y`をログ出力すると、`1`が返されます。"},{"id":58,"question":" 何が出力されるでしょうか？","codeSnippet":"const user = { name: \"Lydia\", age: 21 };\nconst admin = { admin: true, ...user };\n\nconsole.log(admin);","answerOptions":{"A":"`{ admin: true, user: { name: \"Lydia\", age: 21 } }`","B":"`{ admin: true, name: \"Lydia\", age: 21 }`","C":"`{ admin: true, user: [\"Lydia\", 21] }`","D":"`{ admin: true }`"},"correctAnswer":"B","answerExplanation":"スプレッド演算子`...`を使ってオブジェクトを結合することができます。あるオブジェクトのキーと値のペアのコピーを作成し、それらを別のオブジェクトに追加することができます。\n\n上記の場合だと、`user`オブジェクトのコピーを作成し、それらを`admin`オブジェクトに追加します。`admin`オブジェクトはコピーされたキーと値のペアを含み、その結果`{admin：true、name： \"Lydia\"、age：21}`となります。"},{"id":59,"question":" 何が出力されるでしょうか？","codeSnippet":"const person = { name: \"Lydia\" };\n\nObject.defineProperty(person, \"age\", { value: 21 });\n\nconsole.log(person);\nconsole.log(Object.keys(person));","answerOptions":{"A":"`{ name: \"Lydia\", age: 21 }`, `[\"name\", \"age\"]`","B":"`{ name: \"Lydia\", age: 21 }`, `[\"name\"]`","C":"`{ name: \"Lydia\"}`, `[\"name\", \"age\"]`","D":"`{ name: \"Lydia\"}`, `[\"age\"]`"},"correctAnswer":"B","answerExplanation":"`defineProperty`メソッドを使うと、オブジェクトに新しいプロパティを追加したり、既存のプロパティを修正することができます。 `defineProperty`メソッドを使ってオブジェクトにプロパティを追加すると、それらはデフォルトでは _列挙できません_。 \n\n`Object.keys`メソッドはオブジェクトから全ての _enumerable_ （列挙可能）なプロパティ名を返します。上記の場合は`\"name\"`だけとなります。\n\n`defineProperty`メソッドを使って追加されたプロパティはデフォルトでは不変となります。 この動作は`writable`, `configurable`, `enumerable`プロパティを使って上書きすることができます。このように、`defineProperty`メソッドは、オブジェクトに追加しようとしているプロパティをもっと細かく制御できます。"},{"id":60,"question":" 何が出力されるでしょうか？","codeSnippet":"const settings = {\n  username: \"lydiahallie\",\n  level: 19,\n  health: 90\n};\n\nconst data = JSON.stringify(settings, [\"level\", \"health\"]);\nconsole.log(data);","answerOptions":{"A":"`\"{\"level\":19, \"health\":90}\"`","B":"`\"{\"username\": \"lydiahallie\"}\"`","C":"`\"[\"level\", \"health\"]\"`","D":"`\"{\"username\": \"lydiahallie\", \"level\":19, \"health\":90}\"`"},"correctAnswer":"A","answerExplanation":"`JSON.stringify`の2番目の引数は _replacer_ です。replacerは、関数または配列のいずれかにすることができ、値を文字列化する対象とその方法を制御できます。\n\nreplacerが _array_ の場合、名前が配列に含まれるプロパティのみがJSON文字列に追加されます。上記の場合、`\"level\"`と`\"health\"`という名前のプロパティだけが含まれ、`\"username\"`は除外されます。`data`は`\"{\" level \"：19、\" health \"：90}\"`となります。\n\nreplacerが _function_ の場合、この関数は文字列化しているオブジェクト内のすべてのプロパティに対して呼び出されます。この関数から返される値は、JSON文字列に追加されたときのプロパティの値になり、値が`undefined`の場合、このプロパティはJSON文字列から除外されます。"},{"id":61,"question":" 何が出力されるでしょうか？","codeSnippet":"let num = 10;\n\nconst increaseNumber = () => num++;\nconst increasePassedNumber = number => number++;\n\nconst num1 = increaseNumber();\nconst num2 = increasePassedNumber(num1);\n\nconsole.log(num1);\nconsole.log(num2);","answerOptions":{"A":"`10`, `10`","B":"`10`, `11`","C":"`11`, `11`","D":"`11`, `12`"},"correctAnswer":"A","answerExplanation":"単項演算子`++`はオペランドの値を _最初に返し_ 、_その後に インクリメント_ します。`num1`の値は`10`となります。 なぜなら`incrementNumber`関数は、最初に`num`の値`10`を返し、その後に`num`の値をインクリメントするだけです。\n\n`num1`を`increPassedNumber`に渡したので、`num2`は`10`です。`number`は`10`（`num1`の値です。繰り返しますが、単項演算子`++`は、オペランドの値を _最初に返し_、_その後に インクリメント_ します。したがって、`num2`は`10`となります。"},{"id":62,"question":" 何が出力されるでしょうか？","codeSnippet":"const value = { number: 10 };\n\nconst multiply = (x = { ...value }) => {\n  console.log((x.number *= 2));\n};\n\nmultiply();\nmultiply();\nmultiply(value);\nmultiply(value);","answerOptions":{"A":"`20`, `40`, `80`, `160`","B":"`20`, `40`, `20`, `40`","C":"`20`, `20`, `20`, `40`","D":"`NaN`, `NaN`, `20`, `40`"},"correctAnswer":"C","answerExplanation":"ES6では、パラメータをデフォルト値で初期化できます。値が関数に渡されていない場合やパラメータの値が `\"undefined\"`の場合、パラメータの値はデフォルト値になります。上記の場合、`value`オブジェクトのプロパティを新しいオブジェクトに分割代入されるので、`x`のデフォルト値は`{number：10}`になります。\n\nデフォルトの引数は、_呼び出し時_ に評価されます。関数を呼び出すたびに、_新しい_ オブジェクトが作成されます。\n\n最初に値を渡さずに2回、`multiply`関数を呼び出します: `x`のデフォルト値は `{number：10}`となり、その数の乗算された値、つまり `20`を出力します。\n\n3回目のmultiplyを呼び出すとき、引数を渡します: `value`というオブジェクトです。\n\n`*=`演算子は`x.number = x.number * 2`の省略形となります: `x.number`の値は乗算した値に修正され、`20`を出力します。\n\n4回目は、`value`オブジェクトをもう一度渡します。`x.number`は以前は`20`に修正されているので、`x.number *= 2`は`40`を出力します。"},{"id":63,"question":" 何が出力されるでしょうか？","codeSnippet":"[1, 2, 3, 4].reduce((x, y) => console.log(x, y));","answerOptions":{"A":"`1` `2` and `3` `3` and `6` `4`","B":"`1` `2` and `2` `3` and `3` `4`","C":"`1` `undefined` and `2` `undefined` and `3` `undefined` and `4` `undefined`","D":"`1` `2` and `undefined` `3` and `undefined` `4`"},"correctAnswer":"D","answerExplanation":"`reduce`メソッドが受け取る最初の引数は _アキュムレータ_ となります。この場合は`x`です。 2番目の引数は、_現在の値_ `y`です。 reduceメソッドでは、配列内のすべての要素に対してコールバック関数を実行します。これにより、最終的に1つの値が得られます。\n\n上記の例では、値を返していません。単にアキュムレータの値と現在の値を記録しています。\n\nアキュムレータの値は、以前に返されたコールバック関数の値と同じです。オプションの`initialValue`引数を`reduce`メソッドに渡さないと、アキュムレータは最初の呼び出しの最初の要素に等しくなります。\n\n最初の呼び出しでは、アキュムレータ(`x`)は`1`であり、現在値(`y`)は`2`となります。コールバック関数からは戻らないので、アキュムレータと現在の値を出力します: `1`と`2`が出力されます。\n\n関数から値を返さなければ、`undefined`を返します。次の呼び出しでは、アキュムレータは`undefined`で、現在の値は`3`です。`undefined`と`3`が出力されます。\n\n4回目の呼び出しでも、コールバック関数からは戻りません。アキュムレータもまた`undefined`であり、現在の値は`4`となり、`undefined`と`4`が出力されます。"},{"id":64,"question":" どのコンストラクタを使えば `Dog` classを継承できるでしょうか？","codeSnippet":"class Dog {\n  constructor(name) {\n    this.name = name;\n  }\n};\n\nclass Labrador extends Dog {\n  // 1 \n  constructor(name, size) {\n    this.size = size;\n  }\n  // 2\n  constructor(name, size) {\n    super(name);\n    this.size = size;\n  }\n  // 3\n  constructor(size) {\n    super(name);\n    this.size = size;\n  }\n  // 4 \n  constructor(name, size) {\n    this.name = name;\n    this.size = size;\n  }\n\n};","answerOptions":{"A":"1","B":"2","C":"3","D":"4"},"correctAnswer":"B","answerExplanation":"派生クラスでは、`super`を呼び出す前に、`this`キーワードにアクセスすることはできません。そうしようとすると、ReferenceErrorがスローされます: 1と4は参照エラーをスローします。\n\n`super`キーワードを使って、与えられた引数で、その親クラスのコンストラクタを呼び出します。親のコンストラクタは`name`引数を受け取るので、`name`を`super`に渡す必要があります。\n\n`Labrador`クラスは2つの引数、`Dog`を拡張するための`name`と、`Labrador`クラスの追加のプロパティとしての`size`を受け取ります。\n\n両方とも`Labrador`のコンストラクタ関数に渡す必要があります。これはコンストラクタ2を使って正しく実行されます。"},{"id":65,"question":" 何が出力されるでしょうか？","codeSnippet":"// index.js\nconsole.log('running index.js');\nimport { sum } from './sum.js';\nconsole.log(sum(1, 2));\n\n// sum.js\nconsole.log('running sum.js');\nexport const sum = (a, b) => a + b;","answerOptions":{"A":"`running index.js`, `running sum.js`, `3`","B":"`running sum.js`, `running index.js`, `3`","C":"`running sum.js`, `3`, `running index.js`","D":"`running index.js`, `undefined`, `running sum.js`"},"correctAnswer":"B","answerExplanation":"`import`キーワードを使うと、全てのインポートされたモジュールは _事前解析_ されます。これは、インポートされたモジュールが _最初_ に実行され、_その後_ モジュールをインポートしたファイル内のコードが実行されることを意味します。\n\nこれはCommonJSの`require()`と`import`の違いです。`require()`を使うと、コードが実行されている間に依存関係をオンデマンドでロードすることができます。 \n\n`import`の代わりに`require`を使用したとしたら、`running index.js`, `running sum.js`, `3`が出力されているはずです。"},{"id":66,"question":" 何が出力されるでしょうか？","codeSnippet":"console.log(Number(2) === Number(2))\nconsole.log(Boolean(false) === Boolean(false))\nconsole.log(Symbol('foo') === Symbol('foo'))","answerOptions":{"A":"`true`, `true`, `false`","B":"`false`, `true`, `false`","C":"`true`, `false`, `true`","D":"`true`, `true`, `true`"},"correctAnswer":"A","answerExplanation":"すべてのシンボルは完全にユニークです。シンボルに渡される引数の目的は、シンボルに説明を与えることです。Symbolの値は渡された引数に依存しません。\n\n等価性をテストしているので、2つのまったく新しいシンボルを作成します: 最初の`Symbol('foo')`と、2番目の`Symbol('foo')`です。これら2つの値は一意であり、互いに等しくはありません、なので`Symbol('foo') === Symbol('foo')`は`false`を返します。"},{"id":67,"question":" 何が出力されるでしょうか？","codeSnippet":"const name = \"Lydia Hallie\"\nconsole.log(name.padStart(13))\nconsole.log(name.padStart(2))","answerOptions":{"A":"`\"Lydia Hallie\"`, `\"Lydia Hallie\"`","B":"`\"           Lydia Hallie\"`, `\"  Lydia Hallie\"` (`\"[13x whitespace]Lydia Hallie\"`, `\"[2x whitespace]Lydia Hallie\"`)","C":"`\" Lydia Hallie\"`, `\"Lydia Hallie\"` (`\"[1x whitespace]Lydia Hallie\"`, `\"Lydia Hallie\"`)","D":"`\"Lydia Hallie\"`, `\"Lyd\"`,"},"correctAnswer":"C","answerExplanation":"`padStart`メソッドを使うと、文字列の先頭にパディングを追加できます。このメソッドに渡される値は、パディングとともに文字列の長さの _合計_ です。文字列`\"Lydia Hallie\"`の長さは`12`です。 `name.padStart(13)`は、12 + 1が13であるため、文字列の先頭に1スペースを挿入されます。\n\n`padStart`メソッドに渡された引数が、配列の長さよりも小さい場合、パディングは追加されません。"},{"id":68,"question":" 何が出力されるでしょうか？","codeSnippet":"console.log(\"🥑\" + \"💻\");","answerOptions":{"A":"`\"🥑💻\"`","B":"`257548`","C":"A string containing their code points","D":"Error"},"correctAnswer":"A","answerExplanation":"`+`演算子を使うと、文字列を連結することができます。この場合、文字列`\"🥑\"`を文字列`\"💻\"`と連結して、結果として`\"🥑💻\"`となります。"},{"id":69,"question":" console.logステートメントの後にコメントアウトされている値を、ログ出力する方法を教えてください。","codeSnippet":"function* startGame() {\n  const answer = yield \"Do you love JavaScript?\";\n  if (answer !== \"Yes\") {\n    return \"Oh wow... Guess we're gone here\";\n  }\n  return \"JavaScript loves you back ❤️\";\n}\n\nconst game = startGame();\nconsole.log(/* 1 */); // Do you love JavaScript?\nconsole.log(/* 2 */); // JavaScript loves you back ❤️","answerOptions":{"A":"`game.next(\"Yes\").value` and `game.next().value`","B":"`game.next.value(\"Yes\")` and `game.next.value()`","C":"`game.next().value` and `game.next(\"Yes\").value`","D":"`game.next.value()` and `game.next.value(\"Yes\")`"},"correctAnswer":"C","answerExplanation":"ジェネレータ関数は、`yield`キーワードを見るとその実行を「一時停止」します。まず、関数に文字列 \"Do you love JavaScript?\" を返させる必要があります。これは `game.next().value`を呼び出すことによって行うことができます。\n\n最初の`yield`キーワードが見つかるまで、すべての行が実行されます。関数内の最初の行に`yield`キーワードがあります: 実行は最初のyieldで停止します！ _これは変数 `answer`がまだ定義されていないことを意味します！_\n\n`game.next(\"Yes\").value`を呼び出すと、前の`yield`は`next()`関数に渡されたパラメータの値、この場合は`\"Yes\"`に置き換えられます。変数`answer`の値は現在`\"Yes\"`となります。 \n\nif-statemnetの条件は`false`を返し、`JavaScript loves you back ❤️`が、出力されます。"},{"id":70,"question":" 何が出力されるでしょうか？","codeSnippet":"console.log(String.raw`Hello\\nworld`);","answerOptions":{"A":"`Hello world!`","B":"`Hello` <br />&nbsp; &nbsp; &nbsp;`world`","C":"`Hello\\nworld`","D":"`Hello\\n` <br /> &nbsp; &nbsp; &nbsp;`world`"},"correctAnswer":"C","answerExplanation":"`String.raw`はエスケープ(`\\n`, `\\v`, `\\t` など)を無視した文字列を返します。バックスラッシュは問題になる可能性があります:\n\n`` const path = `C:\\Documents\\Projects\\table.html` ``\n\nこれは次のようになります:\n\n`\"C:DocumentsProjects able.html\"`\n\n`String.raw`は、単にエスケープを無視して出力するだけです:\n\n`C:\\Documents\\Projects\\table.html`\n\n上記の場合、文字列は`Hello\\nworld`と出力されます。"},{"id":71,"question":" 何が出力されるでしょうか？","codeSnippet":"async function getData() {\n  return await Promise.resolve(\"I made it!\");\n}\n\nconst data = getData();\nconsole.log(data);","answerOptions":{"A":"`\"I made it!\"`","B":"`Promise {<resolved>: \"I made it!\"}`","C":"`Promise {<pending>}`","D":"`undefined`"},"correctAnswer":"C","answerExplanation":"非同期関数は常に、promiseを返します。`await`はpromiseが解決されるのを待たなければなりません: `getData()`を呼び出すと、`data`は保留中のpromiseが返されます。\n\n解決した値`\"I made it\"`にアクセスしたい場合は、`data`に対して`.then()`メソッドを使用することができます:\n\n`data.then(res => console.log(res))`\n\nこれは`\"I made it!\"`と出力するでしょう。"},{"id":72,"question":" 何が出力されるでしょうか？","codeSnippet":"function addToList(item, list) {\n  return list.push(item);\n}\n\nconst result = addToList(\"apple\", [\"banana\"]);\nconsole.log(result);","answerOptions":{"A":"`['apple', 'banana']`","B":"`2`","C":"`true`","D":"`undefined`"},"correctAnswer":"B","answerExplanation":"`.push（）`メソッドは新しい配列の長さを返します。以前は、配列は1つの要素（文字列 `\" banana \"`）を含み、長さは `1`でした。文字列 `\" apple \"`を配列に追加した後、配列は2つの要素を含み、長さは `2`になります。これは `addToList`関数から返されます。\nThe `.push()` method returns the _length_ of the new array! Previously, the array contained one element (the string `\"banana\"`) and had a length of `1`. After adding the string `\"apple\"` to the array, the array contains two elements, and has a length of `2`. This gets returned from the `addToList` function.\n\n`push`メソッドは元の配列を修正します。配列の長さではなく関数から配列を返したい場合は、itemをプッシュした後にlistを返すべきです。\nThe `push` method modifies the original array. If you wanted to return the _array_ from the function rather than the _length of the array_, you should have returned `list` after pushing `item` to it."},{"id":73,"question":" 何が出力されるでしょうか？","codeSnippet":"const box = { x: 10, y: 20 };\n\nObject.freeze(box);\n\nconst shape = box;\nshape.x = 100;\n\nconsole.log(shape);","answerOptions":{"A":"`{ x: 100, y: 20 }`","B":"`{ x: 10, y: 20 }`","C":"`{ x: 100 }`","D":"`ReferenceError`"},"correctAnswer":"B","answerExplanation":"`Object.freeze`は、オブジェクトのプロパティを追加、削除、変更することを不可能にします（プロパティの値が他のオブジェクトのものでない限り）。\n\n変数`shape`を作成し、フリーズしたオブジェクト`box`に代入すると、`shape`はフリーズしたオブジェクトとなります。オブジェクトがフリーズしているかどうかは `Object.isFrozen`を使って確認できます。\n\nこの場合、変数`shape`はフリーズしたオブジェクトへの参照を持っているので、`Object.isFrozen(shape)`はtrueを返します。\n\n`shape`はフリーズされており、`x`の値はオブジェクトではないので、プロパティ`x`を変更することはできません。\n\n`x`は`10`のままとなり、`{ x: 10, y: 20 }`と出力されます。"},{"id":74,"question":" 何が出力されるでしょうか？","codeSnippet":"const { name: myName } = { name: \"Lydia\" };\n\nconsole.log(name);","answerOptions":{"A":"`\"Lydia\"`","B":"`\"myName\"`","C":"`undefined`","D":"`ReferenceError`"},"correctAnswer":"D","answerExplanation":"右側のオブジェクトからプロパティ`name`をアンパックするとき、その値`\"Lydia\"`を`myName`という名前の変数に代入します。\n\n`{name：myName}`を使って、右側の `name`プロパティの値で`myName`という新しい変数を作りたいことをJavaScriptに伝えます。\n\n定義されていない変数`name`を出力しようとしているので、ReferenceErrorが投げられます。"},{"id":75,"question":" これは純粋関数でしょうか？","codeSnippet":"function sum(a, b) {\n  return a + b;\n}","answerOptions":{"A":"Yes","B":"No"},"correctAnswer":"A","answerExplanation":"純粋な関数は、同じ引数が渡された場合、_常に_ 同じ結果を返す関数です。\n\n`sum`関数は常に同じ結果を返します。`1`と`2`を渡すと、副作用なしに _常に_ `3` を返します。`5`と`10`を渡すと、_常に_ `15`が返され、以下同様に続きます。これが純粋関数の定義です。"},{"id":76,"question":" 何が出力されるでしょうか？","codeSnippet":"const add = () => {\n  const cache = {};\n  return num => {\n    if (num in cache) {\n      return `From cache! ${cache[num]}`;\n    } else {\n      const result = num + 10;\n      cache[num] = result;\n      return `Calculated! ${result}`;\n    }\n  };\n};\n\nconst addFunction = add();\nconsole.log(addFunction(10));\nconsole.log(addFunction(10));\nconsole.log(addFunction(5 * 2));","answerOptions":{"A":"`Calculated! 20` `Calculated! 20` `Calculated! 20`","B":"`Calculated! 20` `From cache! 20` `Calculated! 20`","C":"`Calculated! 20` `From cache! 20` `From cache! 20`","D":"`Calculated! 20` `From cache! 20` `Error`"},"correctAnswer":"C","answerExplanation":"`add`関数は _memoized_ 関数です。メモ化により、実行速度を上げるために関数の結果をキャッシュすることができます。上記の場合、以前に返された値を格納する`cache`オブジェクトを作成します。\n\n同じ引数を指定してもう一度`addFunction`関数を呼び出すと、最初にキャッシュ内でその値がすでに取得されているかどうかを調べます。\n\nこの場合、cachesの値が返され、実行時間が短縮されます。そうでなくキャッシュされていなければ、値を計算した後にそれを格納します。\n\n同じ値で3回`addFunction`関数を呼び出します: 最初の呼び出しでは、`num`に`10`を代入した時、関数の値はまだキャッシュされていません。 \n\nifステートメントの`num in cache`の条件は`false`を返し、elseブロックが実行されます: `Calculated! 20`が出力され、結果の値がキャッシュオブジェクトに追加されます。 `cache`は現在 `{ 10: 20 }`となります。\n\n2回目は、`cache`オブジェクトは`10`に対して返される値を含みます。 ifステートメントの`num in cache`の条件は`true`となり、`'From cache! 20'`を返します。 よって`'From cache! 20'`が出力されます。\n\n3回目は、`10`に評価される関数に`5 * 2`を渡します。`cache`オブジェクトは`10`に対して返される値を含みます。ifステートメントの`num in cache`の条件は`true`となり、`'From cache! 20'`を返します。 よって`'From cache! 20'`が出力されます。"},{"id":77,"question":" 何が出力されるでしょうか？","codeSnippet":"const myLifeSummedUp = [\"☕\", \"💻\", \"🍷\", \"🍫\"]\n\nfor (let item in myLifeSummedUp) {\n  console.log(item)\n}\n\nfor (let item of myLifeSummedUp) {\n  console.log(item)\n}","answerOptions":{"A":"`0` `1` `2` `3` and `\"☕\"` ` \"💻\"` `\"🍷\"` `\"🍫\"`","B":"`\"☕\"` ` \"💻\"` `\"🍷\"` `\"🍫\"` and `\"☕\"` ` \"💻\"` `\"🍷\"` `\"🍫\"`","C":"`\"☕\"` ` \"💻\"` `\"🍷\"` `\"🍫\"` and `0` `1` `2` `3`","D":"`0` `1` `2` `3` and `{0: \"☕\", 1: \"💻\", 2: \"🍷\", 3: \"🍫\"}`"},"correctAnswer":"A","answerExplanation":"_for-in_ ループを使うと、**列挙可能な**プロパティを繰り返し処理できます。配列では、列挙可能なプロパティは配列要素の「キー」です。これはそれらのインデックスとなり、配列は次のようになります:\n\n`{0: \"☕\", 1: \"💻\", 2: \"🍷\", 3: \"🍫\"}`\n\nキーが列挙可能なプロパティであるので、`0` `1` `2` `3`が出力されます。\n\n_for-of_ ループを使うと、**反復可能オブジェクト**を繰り返し処理できます。\n\n配列はイテラブルです。配列を反復処理するとき、変数 \"item\"は、現在反復処理している要素となるので、`\"☕\"` ` \"💻\"` `\"🍷\"` `\"🍫\"`が出力されます。"},{"id":78,"question":" 何が出力されるでしょうか？","codeSnippet":"const list = [1 + 2, 1 * 2, 1 / 2]\nconsole.log(list)","answerOptions":{"A":"`[\"1 + 2\", \"1 * 2\", \"1 / 2\"]`","B":"`[\"12\", 2, 0.5]`","C":"`[3, 2, 0.5]`","D":"`[1, 1, 1]`"},"correctAnswer":"C","answerExplanation":"配列要素は任意の値を保持できます。数値、文字列、オブジェクト、その他の配列、null、ブール値、undefined、および日付、関数、計算などのその他の式。\n\n要素は戻り値と等しくなります。`1 + 2`は`3`を返し、`1 * 2`は`2`を返し、`1 / 2`は`0.5`を返します。"},{"id":79,"question":" 何が出力されるでしょうか？","codeSnippet":"function sayHi(name) {\n  return `Hi there, ${name}`\n}\n\nconsole.log(sayHi())","answerOptions":{"A":"`Hi there, `","B":"`Hi there, undefined`","C":"`Hi there, null`","D":"`ReferenceError`"},"correctAnswer":"B","answerExplanation":"関数に値が渡されていない限り、引数はデフォルトで`undefined`の値を持ちます。上記の場合、`name`引数に値を渡さなかったので、`name`は`undefined`となり出力されます。\n\nES6では、このデフォルトの`undefined`値を、デフォルトパラメータで上書きすることができます。例:\n\n`function sayHi(name = \"Lydia\") { ... }`\n\n上記の場合、値を渡さなかった場合や、`undefined`を渡した場合は、`name`は常に文字列`Lydia`となります。"},{"id":80,"question":" 何が出力されるでしょうか？","codeSnippet":"var status = \"😎\"\n\nsetTimeout(() => {\n  const status = \"😍\"\n\n  const data = {\n    status: \"🥑\",\n    getStatus() {\n      return this.status\n    }\n  }\n\n  console.log(data.getStatus())\n  console.log(data.getStatus.call(this))\n}, 0)","answerOptions":{"A":"`\"🥑\"` and `\"😍\"`","B":"`\"🥑\"` and `\"😎\"`","C":"`\"😍\"` and `\"😎\"`","D":"`\"😎\"` and `\"😎\"`"},"correctAnswer":"B","answerExplanation":"`this`キーワードの値は使う場所に依存します。 **メソッド**の中では、`getStatus`メソッドのように、`this`キーワードは _メソッドが属するオブジェクトを参照します_ 。\n\nメソッドは`data`オブジェクトに属しているので、`this`は `data`オブジェクトを参照します。 `this.status`をログ出力すると、`data`オブジェクトの`status`プロパティの`\"🥑\"`がログ出力されます。\n\n`call`メソッドを使うと、`this`キーワードが参照するオブジェクトを変更することができます。 **関数**では、`this`キーワードは _その関数が属するオブジェクトを参照します_ 。 \n\n_グローバルオブジェクトで_ `setTimeout`関数を宣言したので、`setTimeout`関数内では、 `this`キーワードは _グローバルオブジェクト_ を参照します。\n\nグローバルオブジェクト上には、値`\"😎\"`を持つ _status_ という変数があります。`this.status`を出力すると、`\"😎\"`が出力されます。"},{"id":81,"question":" 何が出力されるでしょうか？","codeSnippet":"const person = {\n  name: \"Lydia\",\n  age: 21\n}\n\nlet city = person.city\ncity = \"Amsterdam\"\n\nconsole.log(person)","answerOptions":{"A":"`{ name: \"Lydia\", age: 21 }`","B":"`{ name: \"Lydia\", age: 21, city: \"Amsterdam\" }`","C":"`{ name: \"Lydia\", age: 21, city: undefined }`","D":"`\"Amsterdam\"`"},"correctAnswer":"A","answerExplanation":"変数`city`に、`person`オブジェクトの`city`という名前のプロパティの値を代入します。このオブジェクトには`city`という名前のプロパティはないので、変数`city`は`undefined`の値を持ちます。\n\n我々は`person`オブジェクト自身を参照して _いない_ ことに注意してください。`person`オブジェクトの`city`プロパティを、変数`city`に代入するだけです。\n\nそれから、`city`に、文字列`\"Amsterdam\"`を代入しますこれは personオブジェクトを変更しません: そのオブジェクトへの参照はありません。\n\n`person`オブジェクトをログ出力するとき、未修正のオブジェクトが返されます。"},{"id":82,"question":" 何が出力されるでしょうか？","codeSnippet":"function checkAge(age) {\n  if (age < 18) {\n    const message = \"Sorry, you're too young.\"\n  } else {\n    const message = \"Yay! You're old enough!\"\n  }\n\n  return message\n}\n\nconsole.log(checkAge(21))","answerOptions":{"A":"`\"Sorry, you're too young.\"`","B":"`\"Yay! You're old enough!\"`","C":"`ReferenceError`","D":"`undefined`"},"correctAnswer":"C","answerExplanation":"`const`と`let`キーワードを持つ変数は _ブロックスコープ_ です。ブロックは中括弧(`{ }`)で囲まれたものです。上記の場合、if/elseステートメントが中括弧となります。宣言されたブロックの外側で変数を参照することはできません。ReferenceError がスローされます。"},{"id":83,"question":" どのような情報が出力されますか？","codeSnippet":"fetch('https://www.website.com/api/user/1')\n  .then(res => res.json())\n  .then(res => console.log(res))","answerOptions":{"A":"`fetch`メソッドの結果","B":"2回目の `fetch`メソッド呼び出しの結果","C":"前の`.then()`でのコールバックの結果","D":"常に undefined."},"correctAnswer":"C","answerExplanation":"2番目の`.then`の`res`の値は、前の`.then`の戻り値と同じとなります。値が次のハンドラに渡されるように、`.then`を連鎖させることができます。"},{"id":84,"question":" 引数としてtrueを渡すことができない場合、どのオプションが`hasName`を`true`に設定するための方法ですか？","codeSnippet":"function getName(name) {\n  const hasName = //\n}","answerOptions":{"A":"`!!name`","B":"`name`","C":"`new Boolean(name)`","D":"`name.length`"},"correctAnswer":"A","answerExplanation":"`!!name`を使って、`name`の値が、truthyか falseyかを判断します。nameがtruthyであり、これをテストしたい場合、`!name`は`false`を返します。`!false`（これは実際には`!!name`です）は`true`を返します。\n\n`hasName`に`name`を代入することで、`getName`関数に渡されたどんな値も`hasName`に代入されます。ブール値`true`は設定できません。\n\n`new Boolean(true)`は、ブール値そのものではなく、オブジェクトラッパーを返します。\n\n`name.length`は渡された引数の長さを返します。それが`true`であるかどうかではありません。"}]